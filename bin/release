#!/usr/bin/env ruby

require 'fileutils'
require 'date'

class ReleaseManager
  def initialize
    @current_version = get_current_version
    @changelog_path = 'CHANGELOG.md'
    @version_file = 'lib/jekyll-pandoc-exports/version.rb'
  end
  
  def run(new_version = nil)
    if new_version.nil?
      puts "Current version: #{@current_version}"
      puts "Usage: bin/release <new_version>"
      puts "Example: bin/release 1.1.0"
      exit 1
    end
    
    unless valid_version?(new_version)
      puts "Invalid version format. Use semantic versioning (e.g., 1.0.0)"
      exit 1
    end
    
    if version_exists?(new_version)
      puts "Version #{new_version} already exists in CHANGELOG.md"
      exit 1
    end
    
    puts "Preparing release #{new_version}..."
    
    # Update version file
    update_version_file(new_version)
    
    # Update changelog
    update_changelog(new_version)
    
    # Run tests
    puts "Running tests..."
    unless system('bundle exec rake test')
      puts "Tests failed! Aborting release."
      exit 1
    end
    
    # Commit changes
    system("git add #{@version_file} #{@changelog_path}")
    system("git commit -m 'Bump version to #{new_version}'")
    
    # Create and push tag
    system("git tag v#{new_version}")
    system("git push origin main")
    system("git push origin v#{new_version}")
    
    puts "âœ… Release #{new_version} initiated!"
    puts "ðŸš€ GitHub Actions will handle publishing to RubyGems"
    puts "ðŸ“¦ Check https://github.com/mcgarrah/jekyll-pandoc-exports/actions"
  end
  
  private
  
  def get_current_version
    return '1.0.0' unless File.exist?(@version_file)
    
    content = File.read(@version_file)
    match = content.match(/VERSION = ['"]([^'"]+)['"]/)
    match ? match[1] : '1.0.0'
  end
  
  def valid_version?(version)
    version.match?(/^\d+\.\d+\.\d+$/)
  end
  
  def version_exists?(version)
    return false unless File.exist?(@changelog_path)
    
    File.read(@changelog_path).include?("## [#{version}]") || 
    File.read(@changelog_path).include?("## #{version}")
  end
  
  def update_version_file(new_version)
    unless File.exist?(@version_file)
      FileUtils.mkdir_p(File.dirname(@version_file))
      File.write(@version_file, version_file_template(new_version))
      return
    end
    
    content = File.read(@version_file)
    updated = content.gsub(/VERSION = ['"][^'"]+['"]/, "VERSION = '#{new_version}'")
    File.write(@version_file, updated)
    
    puts "Updated #{@version_file}"
  end
  
  def update_changelog(new_version)
    unless File.exist?(@changelog_path)
      File.write(@changelog_path, changelog_template(new_version))
      puts "Created #{@changelog_path}"
      return
    end
    
    content = File.read(@changelog_path)
    
    # Find the unreleased section and replace it
    new_entry = changelog_entry(new_version)
    
    if content.include?('## [Unreleased]')
      # Replace unreleased section
      updated = content.sub(
        /## \[Unreleased\].*?(?=## |\z)/m,
        "## [Unreleased]\n\n#{new_entry}"
      )
    else
      # Insert after the header
      lines = content.lines
      header_end = lines.find_index { |line| line.start_with?('# ') }
      if header_end
        lines.insert(header_end + 2, "#{new_entry}\n")
        updated = lines.join
      else
        updated = "#{new_entry}\n#{content}"
      end
    end
    
    File.write(@changelog_path, updated)
    puts "Updated #{@changelog_path}"
  end
  
  def version_file_template(version)
    <<~RUBY
      module Jekyll
        module PandocExports
          VERSION = '#{version}'
        end
      end
    RUBY
  end
  
  def changelog_template(version)
    <<~MARKDOWN
      # Changelog
      
      All notable changes to this project will be documented in this file.
      
      The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
      and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
      
      ## [Unreleased]
      
      #{changelog_entry(version)}
    MARKDOWN
  end
  
  def changelog_entry(version)
    date = Date.today.strftime('%Y-%m-%d')
    <<~MARKDOWN
      ## [#{version}] - #{date}
      
      ### Added
      - 
      
      ### Changed
      - 
      
      ### Fixed
      - 
    MARKDOWN
  end
end

if __FILE__ == $0
  ReleaseManager.new.run(ARGV[0])
end
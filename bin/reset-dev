#!/usr/bin/env ruby

class DevResetManager
  def run
    if ARGV.include?('--help') || ARGV.include?('-h')
      show_help
      exit 0
    end
    
    puts "🔄 Hard resetting dev branch to match main..."
    puts "⚠️  WARNING: This will discard ALL changes on dev branch!"
    
    # Execute the exact commands requested
    puts "📥 Pulling latest main..."
    system("git pull origin main")
    
    puts "🔄 Switching to dev branch..."
    system("git checkout dev")
    
    puts "💥 Hard resetting dev to main..."
    system("git reset --hard main")
    
    puts "📤 Force pushing dev branch..."
    system("git push origin dev --force")
    
    puts "✅ Dev branch hard reset complete!"
    puts "📊 Dev branch is now identical to main branch"
    puts "🚀 Ready for next development cycle!"
    
    suggest_next_version
  end
  
  private
  
  def show_help
    puts "Dev Branch Hard Reset Tool"
    puts ""
    puts "Usage: bin/reset-dev [options]"
    puts ""
    puts "Description:"
    puts "  Hard resets the dev branch to match main branch exactly."
    puts "  ⚠️  WARNING: This DESTROYS all changes on dev branch!"
    puts ""
    puts "  This script executes:"
    puts "    git pull origin main"
    puts "    git checkout dev"
    puts "    git reset --hard main"
    puts "    git push origin dev --force"
    puts ""
    puts "Options:"
    puts "  -h, --help    Show this help message"
  end
  
  def suggest_next_version
    current_version = get_current_version
    return unless current_version
    
    parts = current_version.split('.').map(&:to_i)
    patch_version = "#{parts[0]}.#{parts[1]}.#{parts[2] + 1}"
    minor_version = "#{parts[0]}.#{parts[1] + 1}.0"
    
    puts ""
    puts "💡 Next versions:"
    puts "   Patch: #{patch_version} (bug fixes)"
    puts "   Minor: #{minor_version} (new features)"
    puts ""
    puts "🏷️  When ready: bin/release <version>"
  end
  
  def get_current_version
    version_file = 'lib/jekyll-pandoc-exports/version.rb'
    return nil unless File.exist?(version_file)
    
    content = File.read(version_file)
    match = content.match(/VERSION = ['"]([^'"]+)['"]/)
    match ? match[1] : nil
  end
end

if __FILE__ == $0
  DevResetManager.new.run
end
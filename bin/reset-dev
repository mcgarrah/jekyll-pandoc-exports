#!/usr/bin/env ruby

class DevResetManager
  # Configuration - change this for different projects
  VERSION_FILE = 'lib/jekyll-pandoc-exports/version.rb'
  
  def run
    if ARGV.include?('--help') || ARGV.include?('-h')
      show_help
      exit 0
    end
    
    # Validate environment before proceeding
    validate_environment
    
    puts "üîÑ Hard resetting dev branch to match main..."
    puts "‚ö†Ô∏è  WARNING: This will discard ALL changes on dev branch!"
    
    # Execute the exact commands requested
    puts "üì• Pulling latest main..."
    system("git pull origin main")
    
    puts "üîÑ Switching to dev branch..."
    system("git checkout dev")
    
    puts "üí• Hard resetting dev to main..."
    system("git reset --hard main")
    
    puts "üì§ Force pushing dev branch..."
    system("git push origin dev --force")
    
    puts "‚úÖ Dev branch hard reset complete!"
    puts "üìä Dev branch is now identical to main branch"
    puts "üöÄ Ready for next development cycle!"
    
    suggest_next_version
  end
  
  private
  
  def validate_environment
    # Check if git command exists
    unless system('which git > /dev/null 2>&1')
      puts "‚ùå Error: Git command not found. Please install Git."
      exit 1
    end
    
    # Check if we're in a git repository
    unless system('git rev-parse --git-dir > /dev/null 2>&1')
      puts "‚ùå Error: Not in a Git repository. Please run from project root."
      exit 1
    end
    
    # Check if main branch exists
    unless system('git show-ref --verify --quiet refs/heads/main')
      puts "‚ùå Error: 'main' branch does not exist."
      exit 1
    end
    
    # Check if dev branch exists
    unless system('git show-ref --verify --quiet refs/heads/dev')
      puts "‚ùå Error: 'dev' branch does not exist."
      exit 1
    end
    
    puts "‚úÖ Environment validation passed"
  end
  
  def show_help
    puts "Dev Branch Hard Reset Tool"
    puts ""
    puts "Usage: bin/reset-dev [options]"
    puts ""
    puts "Description:"
    puts "  Hard resets the dev branch to match main branch exactly."
    puts "  ‚ö†Ô∏è  WARNING: This DESTROYS all changes on dev branch!"
    puts ""
    puts "Requirements:"
    puts "  - Git command available"
    puts "  - Inside a Git repository"
    puts "  - Both 'main' and 'dev' branches exist"
    puts ""
    puts "  This script executes:"
    puts "    git pull origin main"
    puts "    git checkout dev"
    puts "    git reset --hard main"
    puts "    git push origin dev --force"
    puts ""
    puts "Options:"
    puts "  -h, --help    Show this help message"
  end
  
  def suggest_next_version
    current_version = get_current_version
    return unless current_version
    
    parts = current_version.split('.').map(&:to_i)
    patch_version = "#{parts[0]}.#{parts[1]}.#{parts[2] + 1}"
    minor_version = "#{parts[0]}.#{parts[1] + 1}.0"
    
    puts ""
    puts "üí° Next versions:"
    puts "   Patch: #{patch_version} (bug fixes)"
    puts "   Minor: #{minor_version} (new features)"
    puts ""
    puts "üè∑Ô∏è  When ready: bin/release <version>"
  end
  
  def get_current_version
    return nil unless File.exist?(VERSION_FILE)
    
    content = File.read(VERSION_FILE)
    match = content.match(/VERSION = ['"]([^'"]+)['"]/)
    match ? match[1] : nil
  end
end

if __FILE__ == $0
  DevResetManager.new.run
end